#skyblue
# data frame for visuals
vis <- melt(BTraining) %>%
dplyr::filter(variable != "INDEX") %>%
mutate(variable = str_replace(variable, "TEAM_", ""))
ggplot(vis, aes(value)) +
geom_density(fill = "red") +
facet_wrap(~ variable, scales = "free")
#skyblue
# library(reshape)
# library(ggplot2)
#
# par(mfrow = c(3, 3))
#
# datasub = melt(BTraining[c(2:17)])
# ggplot(datasub, aes(x= value)) +
#     geom_density(fill='red') + facet_wrap(~variable, scales = 'free')
ggplot(vis, aes(x = variable, y = value)) +
geom_boxplot(show.legend = T) +
stat_summary(fun.y = mean, color = "red", geom = "point", shape = 18, size = 3) +
coord_flip() +
ylim(0, 2200)
# # data frame for visuals
# vis <- melt(BTraining) %>%
#   dplyr::filter(variable != "INDEX") %>%
#   mutate(variable = str_replace(variable, "TEAM_", ""))
#
# ggplot(vis, aes(value)) +
#   geom_density(fill = "red") +
#   facet_wrap(~ variable, scales = "free")
# #skyblue
library(reshape)
library(ggplot2)
par(mfrow = c(3, 3))
datasub = melt(BTraining[c(2:17)])
ggplot(datasub, aes(x= value)) +
geom_density(fill='red') + facet_wrap(~variable, scales = 'free')
ggplot(vis, aes(x = variable, y = value)) +
geom_boxplot(show.legend = T) +
stat_summary(fun.y = mean, color = "red", geom = "point", shape = 18, size = 3) +
coord_flip() +
ylim(0, 2200)
vis <- melt(BTraining) %>%
dplyr::filter(variable != "INDEX")
ggplot(vis, aes(x = variable, y = value)) +
geom_boxplot(show.legend = T) +
stat_summary(fun.y = mean, color = "red", geom = "point", shape = 18, size = 3) +
coord_flip() +
ylim(0, 2200)
ggplot(vis, aes(value)) +
geom_histogram(fill = "red")  +
facet_wrap(~ variable, scales = "free")
missmap(BTraining[2:17])
library(knitr)
library(tidyverse)
library(kableExtra)
library(ggplot2)
library(gridExtra)
library(dplyr)
library(Hmisc)
library(PerformanceAnalytics)
library(ggcorrplot)
library(corrplot)
opts_chunk$set(echo = TRUE)
missmap(BTraining[2:17])
# # data frame for visuals
# vis <- melt(BTraining) %>%
#   dplyr::filter(variable != "INDEX") %>%
#   mutate(variable = str_replace(variable, "TEAM_", ""))
#
# ggplot(vis, aes(value)) +
#   geom_density(fill = "red") +
#   facet_wrap(~ variable, scales = "free")
# #skyblue
library(reshape)
library(ggplot2)
par(mfrow = c(3, 3))
datasub = melt(BTraining[c(2:17)])
ggplot(datasub, aes(x= value)) +
geom_density(fill='red') + facet_wrap(~variable, scales = 'free')
missmap(BTraining[2:17])
library(knitr)
library(tidyverse)
library(kableExtra)
library(ggplot2)
library(gridExtra)
library(dplyr)
library(Hmisc)
library(PerformanceAnalytics)
library(ggcorrplot)
library(corrplot)
library(Amelia)
opts_chunk$set(echo = TRUE)
missmap(BTraining[2:17])
cor(BTraining[,2:17])
# Correlation matrix
cm <- cor(BTraining, use="pairwise.complete.obs")
cm <- cm[2:17,2:17]
names <- c("Wins", "H", "2B", "3B", "HR", "BTraining", "SO", "SB", "CS", "HBP", "P-H", "P-HR", "P-BTraining", "P-SO", "E", "DP")
colnames(cm) <- names; rownames(cm) <- names
cm <- round(cm, 2)
cmout <- as.data.frame(cm) %>% mutate_all(function(x) {
cell_spec(x, "latex", color = ifelse(x>0.5 | x<(-0.5),"blue","black"))
})
rownames(cmout) <- names
cmout %>%
kable("latex", escape = F, align = "c", row.names = TRUE) %>%
kable_styling("striped", full_width = F) %>%
row_spec(0, angle = -90)
# cmout %>%
#   kable("html", escape = F, align = "c", row.names = TRUE) %>%
#   kable_styling("striped", full_width = F)
#
chart.Correlation(cm)
corr <- cor(cm, use="complete.ob")
ggcorrplot(corr, hc.order = TRUE, type = "lower",
lab = TRUE, lab_size = 3, digits = 2)
cor_res <- cor(BTraining[c(2:17)], use = "na.or.complete")
corrplot(cor_res,
type = "upper",
order = "original",
tl.col = "black",
tl.srt = 45,
tl.cex = 0.55)
cor_res.df <- data.frame(cor_res)
cor_res.df[1]
# Correlation matrix
cm <- cor(BTraining, use="pairwise.complete.obs")
cm <- cm[2:17,2:17]
names <- c("Wins", "H", "2B", "3B", "HR", "BB", "SO", "SB", "CS", "HBP", "P-H", "P-HR", "P-BB", "P-SO", "E", "DP")
colnames(cm) <- names; rownames(cm) <- names
cm <- round(cm, 2)
cmout <- as.data.frame(cm) %>% mutate_all(function(x) {
cell_spec(x, "latex", color = ifelse(x>0.5 | x<(-0.5),"blue","black"))
})
rownames(cmout) <- names
cmout %>%
kable("latex", escape = F, align = "c", row.names = TRUE) %>%
kable_styling("striped", full_width = F) %>%
row_spec(0, angle = -90)
# cmout %>%
#   kable("html", escape = F, align = "c", row.names = TRUE) %>%
#   kable_styling("striped", full_width = F)
#
chart.Correlation(cm)
corr <- cor(cm, use="complete.ob")
ggcorrplot(corr, hc.order = TRUE, type = "lower",
lab = TRUE, lab_size = 3, digits = 2)
cor_res <- cor(BTraining[c(2:17)], use = "na.or.complete")
corrplot(cor_res,
type = "upper",
order = "original",
tl.col = "black",
tl.srt = 45,
tl.cex = 0.55)
chart.Correlation(BTraining)
corr <- cor(cm, use="complete.ob")
ggcorrplot(corr, hc.order = TRUE, type = "lower",
lab = TRUE, lab_size = 3, digits = 2)
cor_res <- cor(BTraining[c(2:17)], use = "na.or.complete")
corrplot(cor_res,
type = "upper",
order = "original",
tl.col = "black",
tl.srt = 45,
tl.cex = 0.55)
chart.Correlation(BTraining)
corr <- cor(BTraining[c(2:17)], use="complete.ob")
ggcorrplot(corr, hc.order = TRUE, type = "lower",
lab = TRUE, lab_size = 3, digits = 2)
cor_res <- cor(BTraining[c(2:17)], use = "na.or.complete")
corrplot(cor_res,
type = "upper",
order = "original",
tl.col = "black",
tl.srt = 45,
tl.cex = 0.55)
chart.Correlation(BTraining)
vis <- melt(BTraining) %>%
dplyr::filter(variable != "INDEX") %>%
mutate(variable = str_replace(variable, "TEAM_", ""))
corr <- cor(vis, use="complete.ob")
chart.Correlation(BTraining)
corr <- cor(BTraining[c(2:17)], use="complete.ob")
ggcorrplot(corr, hc.order = TRUE, type = "lower",
lab = TRUE, lab_size = 3, digits = 2)
cor_res <- cor(BTraining[c(2:17)], use = "na.or.complete")
corrplot(cor_res,
type = "upper",
order = "original",
tl.col = "black",
tl.srt = 45,
tl.cex = 0.55)
chart.Correlation(BTraining)
corr <- cor(BTraining[c(2:17)], use="complete.ob")
ggcorrplot(corr, hc.order = TRUE, type = "lower",
lab = TRUE, digits = 2)
cor_res <- cor(BTraining[c(2:17)], use = "na.or.complete")
corrplot(cor_res,
type = "upper",
order = "original",
tl.col = "black",
tl.srt = 45,
tl.cex = 0.55)
chart.Correlation(BTraining)
corr <- cor(cm, use="complete.ob")
ggcorrplot(corr, hc.order = TRUE, type = "lower",
lab = TRUE, lab_size = 3, digits = 2)
cor_res <- cor(BTraining[c(2:17)], use = "na.or.complete")
corrplot(cor_res,
type = "upper",
order = "original",
tl.col = "black",
tl.srt = 45,
tl.cex = 0.55)
chart.Correlation(BTraining)
othercm <- cor(BTraining, use="pairwise.complete.obs")
othercm <- othercm[2:17,2:17]
#corr <- cor(cm, use="complete.ob")
ggcorrplot(othercm, hc.order = TRUE, type = "lower",
lab = TRUE, lab_size = 3, digits = 2)
cor_res <- cor(BTraining[c(2:17)], use = "na.or.complete")
corrplot(cor_res,
type = "upper",
order = "original",
tl.col = "black",
tl.srt = 45,
tl.cex = 0.55)
#chart.Correlation(BTraining)
OtherM <- melt(BTraining) %>%
dplyr::filter(variable != "INDEX") %>%
mutate(variable = str_replace(variable, "TEAM_", ""))
corM <- cor(OtherM, use="pairwise.complete.obs")
#chart.Correlation(BTraining)
corr <- cor(cm, use="complete.ob")
ggcorrplot(corr, hc.order = TRUE, type = "lower",
lab = TRUE, lab_size = 3, digits = 2)
cor_res <- cor(BTraining[c(2:17)], use = "na.or.complete")
corrplot(cor_res,
type = "upper",
order = "original",
tl.col = "black",
tl.srt = 45,
tl.cex = 0.55)
#chart.Correlation(BTraining)
corr <- cor(cm, use="complete.ob")
ggcorrplot(corr, hc.order = TRUE, type = "lower",
lab = TRUE, lab_size = 3, digits = 2)
cor_res <- cor(BTraining[c(2:17)], use = "na.or.complete")
corrplot(cor_res,
type = "upper",
order = "original",
tl.col = "black",
tl.srt = 45,
tl.cex = 0.55)
cor_res.df['TEAM_BATTING_H','TEAM_PITCHING_H']
cor_res.df['TEAM_BATTING_HR','TEAM_PITCHING_HR']
cor_res.df['TEAM_BATTING_BB','TEAM_PITCHING_BB']
cor_res.df['TEAM_BATTING_SO','TEAM_PITCHING_SO']
cor_res.df['TEAM_BATTING_SO','TEAM_PITCHING_SO']
# Remove observations with no target
BTraining <- BTraining[which(BTraining$TARGET_WINS!=0), ]
# Reset zero values
BTraining[which(BTraining$TEAM_BATTING_H==0),"TEAM_BATTING_H"] <- NA
BTraining[which(BTraining$TEAM_BATTING_2B==0),"TEAM_BATTING_2B"] <- NA
BTraining[which(BTraining$TEAM_BATTING_3B==0),"TEAM_BATTING_3B"] <- NA
BTraining[which(BTraining$TEAM_BATTING_HR==0),"TEAM_BATTING_HR"] <- NA
BTraining[which(BTraining$TEAM_BATTING_BB==0),"TEAM_BATTING_BB"] <- NA
BTraining[which(BTraining$TEAM_BATTING_SO==0),"TEAM_BATTING_SO"] <- NA
BTraining[which(BTraining$TEAM_BASERUN_SB==0),"TEAM_BASERUN_SB"] <- NA
BTraining[which(BTraining$TEAM_BASERUN_CS==0),"TEAM_BASERUN_CS"] <- NA
BTraining[which(BTraining$TEAM_FIELDING_E==0),"TEAM_FIELDING_E"] <- NA
BTraining[which(BTraining$TEAM_FIELDING_DP==0),"TEAM_FIELDING_DP"] <- NA
BTraining[which(BTraining$TEAM_PITCHING_BB==0),"TEAM_PITCHING_BB"] <- NA
BTraining[which(BTraining$TEAM_PITCHING_H==0),"TEAM_PITCHING_H"] <- NA
BTraining[which(BTraining$TEAM_PITCHING_HR==0),"TEAM_PITCHING_HR"] <- NA
BTraining[which(BTraining$TEAM_PITCHING_SO==0),"TEAM_PITCHING_SO"] <- NA
# Impute missing values
BTrainingImpute <- aregImpute(~ TARGET_WINS + TEAM_BATTING_H + TEAM_BATTING_2B + TEAM_BATTING_3B +
TEAM_BATTING_HR + TEAM_BATTING_BB + TEAM_BATTING_SO + TEAM_BASERUN_SB +
TEAM_BASERUN_CS + TEAM_FIELDING_DP + TEAM_FIELDING_E + TEAM_PITCHING_BB +
TEAM_PITCHING_H + TEAM_PITCHING_HR + TEAM_PITCHING_SO,
data = BTraining, n.impute = 10)
BTrainingI <- impute.transcan(BTrainingImpute, imputation=10, data=BTraining,
list.out=TRUE, pr=FALSE, check=FALSE)
BTraining$TEAM_BASERUN_SB <- BTrainingI$TEAM_BASERUN_SB
BTraining$TEAM_BASERUN_CS <- BTrainingI$TEAM_BASERUN_CS
BTraining$TEAM_BATTING_3B <- BTrainingI$TEAM_BATTING_3B
BTraining$TEAM_BATTING_HR <- BTrainingI$TEAM_BATTING_HR
BTraining$TEAM_BATTING_SO <- BTrainingI$TEAM_BATTING_SO
BTraining$TEAM_FIELDING_DP <- BTrainingI$TEAM_FIELDING_DP
BTraining$TEAM_PITCHING_HR <- BTrainingI$TEAM_PITCHING_HR
BTraining$TEAM_PITCHING_SO <- BTrainingI$TEAM_PITCHING_SO
BTrainingImpute$rsq
# Adjust outliers
BTraining[which(BTraining$TEAM_PITCHING_SO>2500),"TEAM_PITCHING_SO"] <- 2500
BTraining[which(BTraining$TEAM_PITCHING_H>13000),"TEAM_PITCHING_H"] <- 13000
BTraining[which(BTraining$TEAM_PITCHING_BB>1100),"TEAM_PITCHING_BB"] <- 1100
# Create singles
BTraining$TEAM_BATTING_S <- BTraining$TEAM_BATTING_H - BTraining$TEAM_BATTING_2B - BTraining$TEAM_BATTING_3B - BTraining$TEAM_BATTING_HR
summary(BTraining$TEAM_BATTING_S)
# Create log fielding error
BTraining$TEAM_FIELDING_E_LOG <- log(BTraining$TEAM_FIELDING_E)
m1 <- lm(TARGET_WINS ~ TEAM_BATTING_H + TEAM_BATTING_BB + TEAM_FIELDING_E, data=BTraining)
summary(m1)
m2 <- lm(TARGET_WINS ~ TEAM_BATTING_S + TEAM_BATTING_2B + TEAM_BATTING_3B + TEAM_BATTING_HR +
TEAM_BATTING_BB + TEAM_FIELDING_E, data=BTraining)
summary(m2)
m3 <- lm(TARGET_WINS ~ TEAM_BATTING_SO:TEAM_BATTING_H + TEAM_BATTING_BB:TEAM_BATTING_H + TEAM_BATTING_SO +
TEAM_BASERUN_SB + TEAM_FIELDING_DP + TEAM_PITCHING_HR + TEAM_FIELDING_E_LOG, data=BTraining)
summary(m3)
m4 <- lm(TARGET_WINS ~ TEAM_BATTING_S + TEAM_BATTING_2B + TEAM_BATTING_3B +
TEAM_BATTING_HR + TEAM_BATTING_BB + TEAM_BATTING_SO + TEAM_BASERUN_SB +
TEAM_BASERUN_CS + TEAM_FIELDING_DP + TEAM_FIELDING_E + TEAM_PITCHING_BB +
TEAM_PITCHING_H + TEAM_PITCHING_SO + TEAM_PITCHING_HR, data=BTraining)
m4 <- lm(TARGET_WINS ~ TEAM_BATTING_S + TEAM_BATTING_2B + TEAM_BATTING_3B +
TEAM_BATTING_HR + TEAM_BATTING_BB + TEAM_BATTING_SO + TEAM_BASERUN_SB +
TEAM_FIELDING_DP + TEAM_FIELDING_E + TEAM_PITCHING_BB +
TEAM_PITCHING_H + TEAM_PITCHING_SO + TEAM_PITCHING_HR, data=BTraining)
summary(m4)
m5 <- lm(TARGET_WINS ~ TEAM_BATTING_S  + TEAM_BATTING_3B +
TEAM_BATTING_HR + TEAM_BASERUN_SB  +
TEAM_FIELDING_E_LOG*TEAM_PITCHING_H, data=BTraining)
summary(m5)
model1 <- lm(TARGET_WINS ~ TEAM_BATTING_H + TEAM_BATTING_BB + TEAM_FIELDING_E, data=BTraining)
summary(model1)
model2 <- lm(TARGET_WINS ~ TEAM_BATTING_S + TEAM_BATTING_2B + TEAM_BATTING_3B + TEAM_BATTING_HR +
TEAM_BATTING_BB + TEAM_FIELDING_E, data=BTraining)
summary(model2)
model3 <- lm(TARGET_WINS ~ TEAM_BATTING_SO:TEAM_BATTING_H + TEAM_BATTING_BB:TEAM_BATTING_H + TEAM_BATTING_SO +
TEAM_BASERUN_SB + TEAM_FIELDING_DP + TEAM_PITCHING_HR + TEAM_FIELDING_E_LOG, data=BTraining)
summary(model3)
AIC(m1, m2, m3, m4, m5)
summary(m4)
plot(m4$residuals, ylab="Residuals")
abline(h=0)
model5 <- lm(TARGET_WINS ~ TEAM_BATTING_S  + TEAM_BATTING_3B +
TEAM_BATTING_HR + TEAM_BASERUN_SB  +
TEAM_FIELDING_E_LOG*TEAM_PITCHING_H, data=BTraining)
summary(model5)
AIC(model1, model2, model3, model4, model5)
#model started with all variables
model4 <- lm(TARGET_WINS ~ TEAM_BATTING_S + TEAM_BATTING_2B + TEAM_BATTING_3B +
TEAM_BATTING_HR + TEAM_BATTING_BB + TEAM_BATTING_SO + TEAM_BASERUN_SB +
TEAM_BASERUN_CS + TEAM_FIELDING_DP + TEAM_FIELDING_E + TEAM_PITCHING_BB +
TEAM_PITCHING_H + TEAM_PITCHING_SO + TEAM_PITCHING_HR, data=BTraining)
#then removed TEAM_BASERUN_CS variable, the model becomes
model4 <- lm(TARGET_WINS ~ TEAM_BATTING_S + TEAM_BATTING_2B + TEAM_BATTING_3B +
TEAM_BATTING_HR + TEAM_BATTING_BB + TEAM_BATTING_SO + TEAM_BASERUN_SB +
TEAM_FIELDING_DP + TEAM_FIELDING_E + TEAM_PITCHING_BB +
TEAM_PITCHING_H + TEAM_PITCHING_SO + TEAM_PITCHING_HR, data=BTraining)
summary(model4)
model5 <- lm(TARGET_WINS ~ TEAM_BATTING_S  + TEAM_BATTING_3B +
TEAM_BATTING_HR + TEAM_BASERUN_SB  +
TEAM_FIELDING_E_LOG*TEAM_PITCHING_H, data=BTraining)
summary(model5)
AIC(model1, model2, model3, model4, model5)
summary(model4)
plot(model4$residuals, ylab="Residuals")
abline(h=0)
plot(model4$fitted.values, m4$residuals, xlab="Fitted Values", ylab="Residuals")
abline(h=0)
qqnorm(model4$residuals)
qqline(model4$residuals)
BTrainingTest <- read.csv("moneyball-evaluation-data.csv")
BTrainingTest <- read.csv("moneyball-evaluation-data.csv")
BTrainingTest[which(BTrainingTest$TEAM_BATTING_H==0),"TEAM_BATTING_H"] <- NA
BTrainingTest[which(BTrainingTest$TEAM_BATTING_2B==0),"TEAM_BATTING_2B"] <- NA
BTrainingTest[which(BTrainingTest$TEAM_BATTING_3B==0),"TEAM_BATTING_3B"] <- NA
BTrainingTest[which(BTrainingTest$TEAM_BATTING_HR==0),"TEAM_BATTING_HR"] <- NA
BTrainingTest[which(BTrainingTest$TEAM_BATTING_BB==0),"TEAM_BATTING_BB"] <- NA
BTrainingTest[which(BTrainingTest$TEAM_BATTING_SO==0),"TEAM_BATTING_SO"] <- NA
BTrainingTest[which(BTrainingTest$TEAM_BASERUN_SB==0),"TEAM_BASERUN_SB"] <- NA
BTrainingTest[which(BTrainingTest$TEAM_BASERUN_CS==0),"TEAM_BASERUN_CS"] <- NA
BTrainingTest[which(BTrainingTest$TEAM_FIELDING_E==0),"TEAM_FIELDING_E"] <- NA
BTrainingTest[which(BTrainingTest$TEAM_FIELDING_DP==0),"TEAM_FIELDING_DP"] <- NA
BTrainingTest[which(BTrainingTest$TEAM_PITCHING_BB==0),"TEAM_PITCHING_BB"] <- NA
BTrainingTest[which(BTrainingTest$TEAM_PITCHING_H==0),"TEAM_PITCHING_H"] <- NA
BTrainingTest[which(BTrainingTest$TEAM_PITCHING_HR==0),"TEAM_PITCHING_HR"] <- NA
BTrainingTest[which(BTrainingTest$TEAM_PITCHING_SO==0),"TEAM_PITCHING_SO"] <- NA
# Impute mimssing values
BTrainingImpute <- aregImpute(~ TEAM_BATTING_H + TEAM_BATTING_2B + TEAM_BATTING_3B +
TEAM_BATTING_HR + TEAM_BATTING_BB + TEAM_BATTING_SO + TEAM_BASERUN_SB +
TEAM_BASERUN_CS + TEAM_FIELDING_DP + TEAM_FIELDING_E + TEAM_PITCHING_BB +
TEAM_PITCHING_H + TEAM_PITCHING_HR + TEAM_PITCHING_SO,
data = BTrainingTest, n.impute = 10)
BTrainingImpute
BTrainingImpute$rsq
BTrainingI <- impute.transcan(BTrainingImpute, imputation=10, data=BTrainingTest,
list.out=TRUE, pr=FALSE, check=FALSE)
BTrainingTest$TEAM_BATTING_HR <- BTrainingI$TEAM_BATTING_HR
BTrainingTest$TEAM_BATTING_SO <- BTrainingI$TEAM_BATTING_SO
BTrainingTest$TEAM_BASERUN_SB <- BTrainingI$TEAM_BASERUN_SB
BTrainingTest$TEAM_BASERUN_CS <- BTrainingI$TEAM_BASERUN_CS
BTrainingTest$TEAM_FIELDING_DP <- BTrainingI$TEAM_FIELDING_DP
BTrainingTest$TEAM_PITCHING_HR <- BTrainingI$TEAM_PITCHING_HR
BTrainingTest$TEAM_PITCHING_SO <- BTrainingI$TEAM_PITCHING_SO
# Adjust outliers
BTrainingTest[which(BTrainingTest$TEAM_PITCHING_SO>2500),"TEAM_PITCHING_SO"] <- 2500
BTrainingTest[which(BTrainingTest$TEAM_PITCHING_H>13000),"TEAM_PITCHING_H"] <- 13000
BTrainingTest[which(BTrainingTest$TEAM_PITCHING_BB>1100),"TEAM_PITCHING_BB"] <- 1100
BTrainingTest$TEAM_BATTING_S <- BTrainingTest$TEAM_BATTING_H - BTrainingTest$TEAM_BATTING_2B - BTrainingTest$TEAM_BATTING_3B - BTrainingTest$TEAM_BATTING_HR
BTrainingTest$PREDICT_WIN <- predict(m4, newdata=BTrainingTest, interval="confidence")
#BTrainingTest <- read.csv("moneyball-evaluation-data.csv")
BTrainingTest <- read.csv("moneyball-evaluation-data.csv")
BTrainingTest[which(BTrainingTest$TEAM_BATTING_H==0),"TEAM_BATTING_H"] <- NA
BTrainingTest[which(BTrainingTest$TEAM_BATTING_2B==0),"TEAM_BATTING_2B"] <- NA
BTrainingTest[which(BTrainingTest$TEAM_BATTING_3B==0),"TEAM_BATTING_3B"] <- NA
BTrainingTest[which(BTrainingTest$TEAM_BATTING_HR==0),"TEAM_BATTING_HR"] <- NA
BTrainingTest[which(BTrainingTest$TEAM_BATTING_BB==0),"TEAM_BATTING_BB"] <- NA
BTrainingTest[which(BTrainingTest$TEAM_BATTING_SO==0),"TEAM_BATTING_SO"] <- NA
BTrainingTest[which(BTrainingTest$TEAM_BASERUN_SB==0),"TEAM_BASERUN_SB"] <- NA
BTrainingTest[which(BTrainingTest$TEAM_BASERUN_CS==0),"TEAM_BASERUN_CS"] <- NA
BTrainingTest[which(BTrainingTest$TEAM_FIELDING_E==0),"TEAM_FIELDING_E"] <- NA
BTrainingTest[which(BTrainingTest$TEAM_FIELDING_DP==0),"TEAM_FIELDING_DP"] <- NA
BTrainingTest[which(BTrainingTest$TEAM_PITCHING_BB==0),"TEAM_PITCHING_BB"] <- NA
BTrainingTest[which(BTrainingTest$TEAM_PITCHING_H==0),"TEAM_PITCHING_H"] <- NA
BTrainingTest[which(BTrainingTest$TEAM_PITCHING_HR==0),"TEAM_PITCHING_HR"] <- NA
BTrainingTest[which(BTrainingTest$TEAM_PITCHING_SO==0),"TEAM_PITCHING_SO"] <- NA
# Impute mimssing values
BTrainingImpute <- aregImpute(~ TEAM_BATTING_H + TEAM_BATTING_2B + TEAM_BATTING_3B +
TEAM_BATTING_HR + TEAM_BATTING_BB + TEAM_BATTING_SO + TEAM_BASERUN_SB +
TEAM_BASERUN_CS + TEAM_FIELDING_DP + TEAM_FIELDING_E + TEAM_PITCHING_BB +
TEAM_PITCHING_H + TEAM_PITCHING_HR + TEAM_PITCHING_SO,
data = BTrainingTest, n.impute = 10)
BTrainingImpute
BTrainingImpute$rsq
BTrainingI <- impute.transcan(BTrainingImpute, imputation=10, data=BTrainingTest,
list.out=TRUE, pr=FALSE, check=FALSE)
BTrainingTest$TEAM_BATTING_HR <- BTrainingI$TEAM_BATTING_HR
BTrainingTest$TEAM_BATTING_SO <- BTrainingI$TEAM_BATTING_SO
BTrainingTest$TEAM_BASERUN_SB <- BTrainingI$TEAM_BASERUN_SB
BTrainingTest$TEAM_BASERUN_CS <- BTrainingI$TEAM_BASERUN_CS
BTrainingTest$TEAM_FIELDING_DP <- BTrainingI$TEAM_FIELDING_DP
BTrainingTest$TEAM_PITCHING_HR <- BTrainingI$TEAM_PITCHING_HR
BTrainingTest$TEAM_PITCHING_SO <- BTrainingI$TEAM_PITCHING_SO
# Adjust outliers
BTrainingTest[which(BTrainingTest$TEAM_PITCHING_SO>2500),"TEAM_PITCHING_SO"] <- 2500
BTrainingTest[which(BTrainingTest$TEAM_PITCHING_H>13000),"TEAM_PITCHING_H"] <- 13000
BTrainingTest[which(BTrainingTest$TEAM_PITCHING_BB>1100),"TEAM_PITCHING_BB"] <- 1100
BTrainingTest$TEAM_BATTING_S <- BTrainingTest$TEAM_BATTING_H - BTrainingTest$TEAM_BATTING_2B - BTrainingTest$TEAM_BATTING_3B - BTrainingTest$TEAM_BATTING_HR
BTrainingTest$PREDICT_WIN <- predict(model4, newdata=BTrainingTest, interval="confidence")
BTrainingPredict <- cbind(BTrainingTest$INDEX, BTrainingTest$PREDICT_WIN[, 1], BTrainingTest$PREDICT_WIN[, 2], BTrainingTest$PREDICT_WIN[, 3])
colnames(BTrainingPredict) <- c("Index", "Predicted Wins", "CI Lower", "CI Upper")
kable(round(BTrainingPredict,0))
BTrainingPredict <- cbind(BTrainingTest$INDEX, BTrainingTest$PREDICT_WIN[, 1], BTrainingTest$PREDICT_WIN[, 2], BTrainingTest$PREDICT_WIN[, 3])
colnames(BTrainingPredict) <- c("Index", "Predicted Wins", "CI Lower", "CI Upper")
kable(round(BTrainingPredict,0))
write.csv(BTrainingPredict, file = "ourPrediction.csv")
#BEvaluation <- read.csv("moneyball-evaluation-data.csv")
BEvaluation <- read.csv("https://raw.githubusercontent.com/theoracley/Data621/master/Homework1/moneyball-evaluation-data.csv")
BEvaluation[which(BEvaluation$TEAM_BATTING_H==0),"TEAM_BATTING_H"] <- NA
BEvaluation[which(BEvaluation$TEAM_BATTING_2B==0),"TEAM_BATTING_2B"] <- NA
BEvaluation[which(BEvaluation$TEAM_BATTING_3B==0),"TEAM_BATTING_3B"] <- NA
BEvaluation[which(BEvaluation$TEAM_BATTING_HR==0),"TEAM_BATTING_HR"] <- NA
BEvaluation[which(BEvaluation$TEAM_BATTING_BB==0),"TEAM_BATTING_BB"] <- NA
BEvaluation[which(BEvaluation$TEAM_BATTING_SO==0),"TEAM_BATTING_SO"] <- NA
BEvaluation[which(BEvaluation$TEAM_BASERUN_SB==0),"TEAM_BASERUN_SB"] <- NA
BEvaluation[which(BEvaluation$TEAM_BASERUN_CS==0),"TEAM_BASERUN_CS"] <- NA
BEvaluation[which(BEvaluation$TEAM_FIELDING_E==0),"TEAM_FIELDING_E"] <- NA
BEvaluation[which(BEvaluation$TEAM_FIELDING_DP==0),"TEAM_FIELDING_DP"] <- NA
BEvaluation[which(BEvaluation$TEAM_PITCHING_BB==0),"TEAM_PITCHING_BB"] <- NA
BEvaluation[which(BEvaluation$TEAM_PITCHING_H==0),"TEAM_PITCHING_H"] <- NA
BEvaluation[which(BEvaluation$TEAM_PITCHING_HR==0),"TEAM_PITCHING_HR"] <- NA
BEvaluation[which(BEvaluation$TEAM_PITCHING_SO==0),"TEAM_PITCHING_SO"] <- NA
# Impute mimssing values
BTrainingImpute <- aregImpute(~ TEAM_BATTING_H + TEAM_BATTING_2B + TEAM_BATTING_3B +
TEAM_BATTING_HR + TEAM_BATTING_BB + TEAM_BATTING_SO + TEAM_BASERUN_SB +
TEAM_BASERUN_CS + TEAM_FIELDING_DP + TEAM_FIELDING_E + TEAM_PITCHING_BB +
TEAM_PITCHING_H + TEAM_PITCHING_HR + TEAM_PITCHING_SO,
data = BEvaluation, n.impute = 10)
BTrainingImpute
BTrainingImpute$rsq
BTrainingI <- impute.transcan(BTrainingImpute, imputation=10, data=BEvaluation,
list.out=TRUE, pr=FALSE, check=FALSE)
BEvaluation$TEAM_BATTING_HR <- BTrainingI$TEAM_BATTING_HR
BEvaluation$TEAM_BATTING_SO <- BTrainingI$TEAM_BATTING_SO
BEvaluation$TEAM_BASERUN_SB <- BTrainingI$TEAM_BASERUN_SB
BEvaluation$TEAM_BASERUN_CS <- BTrainingI$TEAM_BASERUN_CS
BEvaluation$TEAM_FIELDING_DP <- BTrainingI$TEAM_FIELDING_DP
BEvaluation$TEAM_PITCHING_HR <- BTrainingI$TEAM_PITCHING_HR
BEvaluation$TEAM_PITCHING_SO <- BTrainingI$TEAM_PITCHING_SO
# Adjust outliers
BEvaluation[which(BEvaluation$TEAM_PITCHING_SO>2500),"TEAM_PITCHING_SO"] <- 2500
BEvaluation[which(BEvaluation$TEAM_PITCHING_H>13000),"TEAM_PITCHING_H"] <- 13000
BEvaluation[which(BEvaluation$TEAM_PITCHING_BB>1100),"TEAM_PITCHING_BB"] <- 1100
BEvaluation$TEAM_BATTING_S <- BEvaluation$TEAM_BATTING_H - BEvaluation$TEAM_BATTING_2B - BEvaluation$TEAM_BATTING_3B - BEvaluation$TEAM_BATTING_HR
BEvaluation$PREDICT_WIN <- predict(model4, newdata=BEvaluation, interval="confidence")
BTrainingPredict <- cbind(BEvaluation$INDEX, BEvaluation$PREDICT_WIN[, 1], BEvaluation$PREDICT_WIN[, 2], BEvaluation$PREDICT_WIN[, 3])
colnames(BTrainingPredict) <- c("Index", "Predicted Wins", "CI Lower", "CI Upper")
kable(round(BTrainingPredict,0))
install.packages('rsconnect')
GiveUsCombinationOf <- function(n, m){
got_it <- factorial(n)/(factorial(m)*factorial(n-m))
return(got_it)
}
#Run the question!!
GiveUsCombinationOf(10, 5)
install.packages("tufte")
install.packages("prettydoc")
library(tufte)
library(tufte)
GiveUsCombinationOf <- function(n, m){
got_it <- factorial(n)/(factorial(m)*factorial(n-m))
return(got_it)
}
#Run the question!!
GiveUsCombinationOf(10, 5)
setwd("C:/Users/abh9013/Desktop/DataScienceSemester2/Data608/Data608/module3")
shiny::runApp('Q1.Shiny')
runApp('Q2.Shiny')
runApp('Q2.Shiny')
